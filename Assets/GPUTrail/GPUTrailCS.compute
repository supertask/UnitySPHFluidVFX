#pragma kernel InitHeader
#pragma kernel InitNode
#pragma kernel EmitTrail

#pragma kernel UpdateParticle
#pragma kernel UpdateFromParticle

#define TRAIL_BLOCK_SIZE 1

#include "GPUTrailData.cginc"
#include "../FluidSPH3D/SPHData.cginc"

StructuredBuffer<Particle> _ParticleBuffer;
RWStructuredBuffer<Particle> _FixedParticleBuffer;

RWStructuredBuffer<TrailNode> _TrailNodeBuffer;
RWStructuredBuffer<TrailHeader> _TrailHeaderBuffer;

AppendStructuredBuffer<int> _TrailHeaderIndexBufferAppend;
ConsumeStructuredBuffer<int> _TrailHeaderIndexBufferConsume;

AppendStructuredBuffer<int> _TrailNodeIndexBufferAppend;
ConsumeStructuredBuffer<int> _TrailNodeIndexBufferConsume;

int _EmitTrailNum;
int _EmitTrailLen;

TrailHeader InitHeader(int idx, TrailHeader header)
{
    header = (TrailHeader)0;
    header.headNodeIndex = -1;
    header.currentlength = -1;
    header.maxLength = -1;
    return header;
}
TrailNode InitNode(int idx, TrailNode node)
{
    node = (TrailNode)0;
    node.prev = node.next = -1;
    node.idx = idx;
    node.pos = 0;
    return node;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitHeader (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    TrailHeader header = _TrailHeaderBuffer[hid];
    header = InitHeader(hid, header);
    _TrailHeaderBuffer[hid] = header;

    _TrailHeaderIndexBufferAppend.Append(hid);
}
 
[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitNode (uint3 id : SV_DispatchThreadID)
{
    const int nid = id.x;
    TrailNode node = _TrailNodeBuffer[nid];
    node = InitNode(nid, node);
    _TrailNodeBuffer[nid] = node;

    _TrailNodeIndexBufferAppend.Append(nid);
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void EmitTrail (uint3 id : SV_DispatchThreadID)
{
    const int tid = id.x;
    if(tid >= _EmitTrailNum) return;

    const int hid = _TrailHeaderIndexBufferConsume.Consume();
    const int maxLength = _EmitTrailLen;

    TrailHeader header = _TrailHeaderBuffer[hid];
    header = InitHeader(hid, header);
    header.currentlength = 0;
    header.maxLength = maxLength;
    _TrailHeaderBuffer[hid] = header;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateParticle (uint3 id : SV_DispatchThreadID)
{
    const int pid = id.x;
    Particle p = _ParticleBuffer[pid];
    _FixedParticleBuffer[p.uuid] = _ParticleBuffer[pid];
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateFromParticle (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    const int pid = hid;
    TrailHeader header = _TrailHeaderBuffer[hid];
    Particle p = _FixedParticleBuffer[pid];

    const int firstid = header.headNodeIndex;
    const int currentlength = header.currentlength;
    const int maxLength = header.maxLength;

    if(maxLength <= 0) return;

    int newid = -1;
    if(currentlength == maxLength)
    {
        int lastid = firstid;
        while(_TrailNodeBuffer[lastid].next != -1) lastid = _TrailNodeBuffer[lastid].next;

        int prev = _TrailNodeBuffer[lastid].prev;
        _TrailNodeBuffer[prev].next = -1;

        newid = lastid;
    }
    else
    {
        newid = _TrailNodeIndexBufferConsume.Consume();
        header.currentlength = currentlength+1;
    }

    TrailNode node = _TrailNodeBuffer[newid];
    node = InitNode(newid, node);
    if(firstid != -1)
    {
        TrailNode first = _TrailNodeBuffer[firstid];
        node.next = first.idx;
        first.prev = node.idx;
        _TrailNodeBuffer[firstid] = first;
    }
    
    header.headNodeIndex = newid;

    node.pos = p.pos;
    // node.pos = float3(currentlength, 0, 0);

    _TrailHeaderBuffer[hid] = header;
    _TrailNodeBuffer[newid] = node;
}
