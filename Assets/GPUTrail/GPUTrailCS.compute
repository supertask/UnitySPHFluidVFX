#pragma kernel Init
#pragma kernel UpdateParticle
#pragma kernel UpdateFromParticle

#define TRAIL_BLOCK_SIZE 256

#include "GPUTrailData.cginc"
#include "../FluidSPH3D/SPHData.cginc"

StructuredBuffer<Particle> _ParticleBuffer;

RWStructuredBuffer<Particle> _FixedParticleBuffer;
AppendStructuredBuffer<int> _ActiveParticleIndexBufferAppend;
StructuredBuffer<int> _ActiveParticleIndexBuffer;
int _ActiveParticleCount;

RWStructuredBuffer<TrailNode> _TrailNodeBuffer;
RWStructuredBuffer<TrailHeader> _TrailHeaderBuffer;
int _TrailHeaderBufferCount;
int _MaxNodeNumPerTrail;


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    const uint tid = id.x;
    TrailHeader header = _TrailHeaderBuffer[tid];
    header.head = tid * _MaxNodeNumPerTrail;
    header.length = _MaxNodeNumPerTrail;

    const uint hid = header.head;
    for(int i = 0; i < _MaxNodeNumPerTrail; ++i)
    {
        const uint nid = hid + i;
        TrailNode node = _TrailNodeBuffer[nid];
        node.head = hid;
        node.pos = 0;
        _TrailNodeBuffer[nid] = node;
    }

    _TrailHeaderBuffer[tid] = header;
}
[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateParticle (uint3 id : SV_DispatchThreadID)
{
    const int pid = id.x;
    Particle p = _ParticleBuffer[pid];
    const int uuid = p.uuid;

    if(IsFluid(p))
    {
        _ActiveParticleIndexBufferAppend.Append(uuid);
    }
    _FixedParticleBuffer[uuid] = p;

}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateFromParticle (uint3 id : SV_DispatchThreadID)
{
    const int tid = id.x;
    const int count = min(_ActiveParticleCount, _TrailHeaderBufferCount);
    if(tid >= count) return;

    TrailHeader header = _TrailHeaderBuffer[tid];
    const int hid = header.head;
    const int uuid = _ActiveParticleIndexBuffer[tid];

    Particle p = _FixedParticleBuffer[uuid];

    TrailNode node = _TrailNodeBuffer[hid];
    node.pos = p.pos;
    _TrailNodeBuffer[hid] = node;
}
