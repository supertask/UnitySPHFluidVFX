#pragma kernel Init
#pragma kernel UpdateParticle
#pragma kernel UpdateFromParticle

#define TRAIL_BLOCK_SIZE 256

#include "GPUTrailData.cginc"
#include "../FluidSPH3D/SPHData.cginc"

StructuredBuffer<Particle> _ParticleBuffer;

RWStructuredBuffer<Particle> _FixedParticleBuffer;

RWStructuredBuffer<TrailNode> _TrailNodeBuffer;
RWStructuredBuffer<TrailHeader> _TrailHeaderBuffer;
int _TrailHeaderBufferCount;
int _MaxNodeNumPerTrail;


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    const int tid = id.x;
    TrailHeader header = _TrailHeaderBuffer[tid];
    header.headNodeIndex = tid * _MaxNodeNumPerTrail;
    header.length = _MaxNodeNumPerTrail;

    const int hid = header.headNodeIndex;
    for(int i = 0; i < _MaxNodeNumPerTrail; ++i)
    {
        const int nid = hid + i;
        TrailNode node = _TrailNodeBuffer[nid];
        // node.pos = float3(i, tid + 10 * sin(i * 2 * 3.14f /_MaxNodeNumPerTrail), 0);
        node.pos = 0;
        _TrailNodeBuffer[nid] = node;
    }

    _TrailHeaderBuffer[tid] = header;
}
[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateParticle (uint3 id : SV_DispatchThreadID)
{
    const int pid = id.x;
    Particle p = _ParticleBuffer[pid];
    _FixedParticleBuffer[p.uuid] = _ParticleBuffer[pid];
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateFromParticle (uint3 id : SV_DispatchThreadID)
{
    const int tid = id.x;

    TrailHeader header = _TrailHeaderBuffer[tid];
    Particle p = _FixedParticleBuffer[tid];
    const int hid = header.headNodeIndex;
    const int len = header.length;


    float dis = distance(p.pos, _TrailNodeBuffer[hid + 1].pos);
    bool shouldUpdate = dis < 7 && (hid%(4096*0.5)==0);

    for(int i = len-1 ; i > 0; --i)
    {
        _TrailNodeBuffer[hid + i] = _TrailNodeBuffer[hid + (i-1)];
        if(!shouldUpdate) _TrailNodeBuffer[hid + i].pos = 0;
    }

    TrailNode head = _TrailNodeBuffer[hid];
    head.pos = p.pos;
    _TrailNodeBuffer[hid] = head;
}
