#pragma kernel ResetGrid
#pragma kernel P2GScattering

//#include "Assets/SPHExample/Shader/SPHData.cginc"
#include "../../../Shader/SPHData.cginc"
#include "./Constant.hlsl"
#include "./Grid.hlsl"
//#include "./FloatToInt2.hlsl"

#define PARTICLE_MASS 1

struct Cell {
    int mass;
	float3 position;
    uint3 cellIndex3D;
    int cellIndex;
};

//#define THREAD_1D 256
#define THREAD_1D 64

uint _NumOfParticles;

RWStructuredBuffer<Particle> _ParticlesBufferRead;
RWStructuredBuffer<Cell> _GridBufferWrite;

//Grid info for VFXGraph
RWStructuredBuffer<int> _GridMassBufferWrite;
RWStructuredBuffer<float3> _GridPositionBufferWrite;

[numthreads(THREAD_1D,1,1)]
void ResetGrid(uint3 DTid : SV_DispatchThreadID)
{
	uint cellIndex = DTid.x;
	if (InGrid(CellIndex1DTo3D(cellIndex)))
	{
		Cell cell;
		cell.mass = 0;
		cell.position = float3(0,0,0);
		cell.cellIndex3D = uint3(0,0,0);
		cell.cellIndex = 0;
		_GridBufferWrite[cellIndex] = cell;
		
		_GridMassBufferWrite[cellIndex] = 0;
		_GridPositionBufferWrite[cellIndex] = float3(0, 0, 0);
	}
}

[numthreads(THREAD_1D,1,1)]
void P2GScattering(uint3 DTid : SV_DispatchThreadID)
{
    const uint particleId = DTid.x;
	if (particleId > _NumOfParticles) return;

	Particle particle = _ParticlesBufferRead[particleId];
	if (particle.type == TYPE__INACTIVE) return;

	int3 cellIndex3D = ParticlePositionToCellIndex3D(particle.pos);

	/*
	_GridBufferWrite[0].position = particle.pos;
	_GridBufferWrite[0].cellIndex3D = cellIndex3D;
	_GridBufferWrite[0].cellIndex = CellIndex3DTo1D(cellIndex3D);
	_GridBufferWrite[0].mass = InGrid(cellIndex3D);
	*/

	if (InGrid(cellIndex3D))
	{
		uint cellIndex = CellIndex3DTo1D(cellIndex3D);
		InterlockedAdd(_GridBufferWrite[cellIndex].mass, PARTICLE_MASS);
		_GridBufferWrite[cellIndex].position = CellIndex3DToPositionWS(cellIndex3D);
		
		_GridMassBufferWrite[cellIndex] = _GridBufferWrite[cellIndex].mass;
		_GridPositionBufferWrite[cellIndex] = _GridBufferWrite[cellIndex].position;
		

		//_GridBufferWrite[cellIndex].cellIndex3D = cellIndex3D;
		//_GridBufferWrite[cellIndex].cellIndex = cellIndex;
	}
	
}
