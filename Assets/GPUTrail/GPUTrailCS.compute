#pragma kernel InitHeader
#pragma kernel InitNode
#pragma kernel EmitTrail

#pragma kernel UpdateParticle
#pragma kernel UpdateFromParticle

#define TRAIL_BLOCK_SIZE 256

#include "GPUTrailData.cginc"
#include "../FluidSPH3D/SPHData.cginc"

StructuredBuffer<Particle> _ParticleBuffer;
RWStructuredBuffer<Particle> _SourceBuffer;

RWStructuredBuffer<TrailNode> _TrailNodeBuffer;
RWStructuredBuffer<TrailHeader> _TrailHeaderBuffer;

AppendStructuredBuffer<int> _TrailNodeIndexBufferAppend;
ConsumeStructuredBuffer<int> _TrailNodeIndexBufferConsume;

int _EmitTrailNum;
int _EmitTrailLen;

TrailHeader InitHeader(int idx, TrailHeader header)
{
    header = (TrailHeader)0;
    header.state = TS_READY;
    header.headNodeIndex = -1;
    header.currentlength = -1;
    header.maxLength = -1;
    return header;
}
TrailNode InitNode(int idx, TrailNode node)
{
    node = (TrailNode)0;
    node.prev = node.next = -1;
    node.idx = idx;
    node.pos = 0;
    return node;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitHeader (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    TrailHeader header = _TrailHeaderBuffer[hid];
    header = InitHeader(hid, header);
    _TrailHeaderBuffer[hid] = header;
}
 
[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitNode (uint3 id : SV_DispatchThreadID)
{
    const int nid = id.x;
    TrailNode node = _TrailNodeBuffer[nid];
    node = InitNode(nid, node);
    _TrailNodeBuffer[nid] = node;

    _TrailNodeIndexBufferAppend.Append(nid);
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void EmitTrail (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    if(hid >= _EmitTrailNum) return;

    const int maxLength = _EmitTrailLen;

    TrailHeader header = _TrailHeaderBuffer[hid];
    header = InitHeader(hid, header);
    header.state = TS_ACTIVE;
    header.currentlength = 0;
    header.maxLength = maxLength;
    _TrailHeaderBuffer[hid] = header;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateParticle (uint3 id : SV_DispatchThreadID)
{
    const int pid = id.x;
    Particle p = _ParticleBuffer[pid];
    _SourceBuffer[p.uuid] = _ParticleBuffer[pid];
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateFromParticle (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    TrailHeader header = _TrailHeaderBuffer[hid];

    const int firstid = header.headNodeIndex;
    const int currentlength = header.currentlength;
    const int maxLength = header.maxLength;

    const int pid = hid;
    Particle p = _SourceBuffer[pid];

    if(!IsActive(header)) return;
    if(!IsActive(p)) return;

    int nid = -1;
    if(currentlength == maxLength)
    {
        nid = _TrailNodeBuffer[firstid].prev;
    }
    else
    {
        nid = _TrailNodeIndexBufferConsume.Consume();
        header.currentlength = currentlength+1;
    }

    TrailNode node = _TrailNodeBuffer[nid];

    if(firstid == -1)
    {
        node.next = node.prev = node.idx;
    }
    else
    if(currentlength != maxLength)
    {
        TrailNode first = _TrailNodeBuffer[firstid];
        if(currentlength == 1)
        {
            node.next = first.idx;
            node.prev = first.idx;
            first.next = node.idx;
            first.prev = node.idx;
            _TrailNodeBuffer[firstid] = first;
        }
        else
        {
            int prev = first.prev;
            TrailNode prevNode = _TrailNodeBuffer[prev];

            node.next = first.idx;
            first.prev = node.idx;
            _TrailNodeBuffer[firstid] = first;

            prevNode.next = node.idx;
            node.prev = prevNode.idx;
            _TrailNodeBuffer[prev] = prevNode;
        }
    }

    header.headNodeIndex = nid;
    node.pos = p.pos;
    // node.pos = float3(currentlength, 0, 0);

    _TrailHeaderBuffer[hid] = header;
    _TrailNodeBuffer[nid] = node;
}
